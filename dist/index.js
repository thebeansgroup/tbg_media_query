// Generated by CoffeeScript 1.9.2
var MediaQuery, React, ResizeMonitor, canUseDOM;

React = require('react/addons');

ResizeMonitor = require('./resize');

canUseDOM = require('react/lib/ExecutionEnvironment').canUseDOM;

MediaQuery = {
  propTypes: {
    breakpoints: React.PropTypes.array.isRequired,
    component: React.PropTypes.string
  },
  getInitialState: function() {
    return {
      breakpoint: null
    };
  },
  getDefaultProps: function() {
    return {
      component: 'div',
      componentProps: {},
      defaultBreakpoint: 'mother',
      breakpoints: []
    };
  },
  hasCurrentBreakpoint: function() {
    return this.props.breakpoints.indexOf(this.state.breakpoint || this.props.defaultBreakpoint) !== -1;
  },
  componentWillMount: function() {
    if (canUseDOM) {
      return this._onChange();
    }
  },
  componentDidMount: function() {
    return ResizeMonitor.addChangeListener(this._onChange);
  },
  componentWillUnmount: function() {
    return ResizeMonitor.removeChangeListener(this._onChange);
  },
  _getBreakpointFromBody: function() {
    if (window.getComputedStyle == null) {
      return '';
    }
    return window.getComputedStyle(document.body, ':after').getPropertyValue('content').replace('-', '').replace(/'/g, '').replace(/"/g, '') || '';
  },
  _onChange: function() {
    return this.setState({
      breakpoint: this._getBreakpointFromBody()
    });
  },
  render: function() {
    if (!this.hasCurrentBreakpoint()) {
      return null;
    }
    return React.createElement(this.props.component, this.props.componentProps, this.props.children);
  }
};

module.exports = React.createClass(MediaQuery);
