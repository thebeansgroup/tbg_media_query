// Generated by CoffeeScript 1.9.1
(function() {
  var PubSub;

  PubSub = (function() {
    function PubSub(_subscriptions) {
      this._subscriptions = _subscriptions != null ? _subscriptions : {};
    }

    PubSub.prototype.subscribe = function(key, cb) {
      var cbs;
      (cbs = this._subscriptions[key] || []).push(cb);
      this._subscriptions[key] = cbs;
      return this;
    };

    PubSub.prototype.isSubscribed = function(key) {
      return Boolean(this._getMatches(key)[0].length);
    };

    PubSub.prototype.unsubscribe = function(key) {
      var found_key, j, len, ref, results;
      ref = this._getMatches(key)[0];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        found_key = ref[j];
        results.push(this._removeFromObject(found_key));
      }
      return results;
    };

    PubSub.prototype.publish = function(key, args) {
      var j, k, len, len1, matches, ref, sub, subs;
      if (args == null) {
        args = [];
      }
      matches = this._getMatches(key);
      if (!matches[0].length) {
        return false;
      }
      args = args.constructor === Array ? args : [args];
      ref = matches[1];
      for (j = 0, len = ref.length; j < len; j++) {
        subs = ref[j];
        for (k = 0, len1 = subs.length; k < len1; k++) {
          sub = subs[k];
          sub.apply(sub, args);
        }
      }
      return this;
    };

    PubSub.prototype._getMatches = function(key) {
      var cb, keys, matches, ref, subKey;
      keys = [];
      matches = [];
      ref = this._subscriptions;
      for (subKey in ref) {
        cb = ref[subKey];
        if (!(this._isMatch(key, subKey))) {
          continue;
        }
        keys.push(subKey);
        matches.push(cb);
      }
      return [keys, matches];
    };

    PubSub.prototype._isMatch = function(subKey, _subKey) {
      var i, longerMessageLength, sub1Array, sub1Bitmask, sub2Array, sub2Bitmask;
      sub1Array = _subKey.split('.');
      sub2Array = subKey.split('.');
      sub1Bitmask = '';
      sub2Bitmask = '';
      longerMessageLength = sub1Array.length >= sub2Array.length ? sub1Array.length : sub2Array.length;
      if (_subKey === subKey) {
        return true;
      }
      if (sub1Array.length !== sub2Array.length) {
        return false;
      }
      i = 0;
      while (i < longerMessageLength) {
        if (sub1Array[i] !== '*' && sub2Array[i] !== '*' && sub1Array[i] !== sub2Array[i]) {
          return false;
        }
        sub1Bitmask += sub1Array[i] === '*' ? '0' : '1';
        sub2Bitmask += sub2Array[i] === '*' ? '0' : '1';
        i++;
      }
      return sub1Bitmask >= sub2Bitmask;
    };

    PubSub.prototype._removeFromObject = function(key) {
      var error;
      try {
        return delete this._subscriptions[key];
      } catch (_error) {
        error = _error;
        return this._subscriptions[key] = void 0;
      }
    };

    return PubSub;

  })();

  module.exports = new PubSub();

}).call(this);
